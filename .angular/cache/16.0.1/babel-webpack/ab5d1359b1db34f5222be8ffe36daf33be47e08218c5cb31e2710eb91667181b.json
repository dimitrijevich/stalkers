{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass ImageUrlTransformService {\n  constructor() {}\n  transform(url) {\n    const urlParts = url.split('/');\n    let newUrl = '';\n    for (let i = 0; i < urlParts.length; i++) {\n      if (i === 2) {\n        newUrl += urlParts[i].replaceAll('-', '--').replaceAll('.', '-') + atob('LnRyYW5zbGF0ZS5nb29n') + '/';\n      } else if (i !== urlParts.length - 1) {\n        newUrl += urlParts[i] + '/';\n      } else {\n        newUrl += urlParts[i];\n      }\n    }\n    return encodeURI(newUrl);\n  }\n}\nImageUrlTransformService.ɵfac = function ImageUrlTransformService_Factory(t) {\n  return new (t || ImageUrlTransformService)();\n};\nImageUrlTransformService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageUrlTransformService,\n  factory: ImageUrlTransformService.ɵfac,\n  providedIn: 'root'\n});\nexport { ImageUrlTransformService };","map":{"version":3,"names":["ImageUrlTransformService","constructor","transform","url","urlParts","split","newUrl","i","length","replaceAll","atob","encodeURI","factory","ɵfac","providedIn"],"sources":["/Users/ilija/Documents/GitHub/stalkers/src/services/imageuritransformservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageUrlTransformService {\n\n  constructor() { }\n\n  transform(url: string): string {\n    const urlParts = url.split('/');\n    let newUrl = '';\n\n    for (let i = 0; i < urlParts.length; i++) {\n      if (i === 2) {\n        newUrl += urlParts[i].replaceAll('-', '--').replaceAll('.', '-') + atob('LnRyYW5zbGF0ZS5nb29n') + '/';\n      } else if (i !== urlParts.length - 1) {\n        newUrl += urlParts[i] + '/';\n      } else {\n        newUrl += urlParts[i];\n      }\n    }\n\n    return encodeURI(newUrl);\n  }\n\n}\n"],"mappings":";AAEA,MAGaA,wBAAwB;EAEnCC,YAAA,GAAgB;EAEhBC,SAASA,CAACC,GAAW;IACnB,MAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;IAC/B,IAAIC,MAAM,GAAG,EAAE;IAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAIA,CAAC,KAAK,CAAC,EAAE;QACXD,MAAM,IAAIF,QAAQ,CAACG,CAAC,CAAC,CAACE,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAACA,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,GAAGC,IAAI,CAAC,sBAAsB,CAAC,GAAG,GAAG;OACtG,MAAM,IAAIH,CAAC,KAAKH,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAE;QACpCF,MAAM,IAAIF,QAAQ,CAACG,CAAC,CAAC,GAAG,GAAG;OAC5B,MAAM;QACLD,MAAM,IAAIF,QAAQ,CAACG,CAAC,CAAC;;;IAIzB,OAAOI,SAAS,CAACL,MAAM,CAAC;EAC1B;;AAnBWN,wBAAwB,C;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB,C;SAAxBA,wBAAwB;EAAAY,OAAA,EAAxBZ,wBAAwB,CAAAa,IAAA;EAAAC,UAAA,EAFvB;AAAM;SAEPd,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}